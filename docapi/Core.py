# -*- coding: utf-8 -*-

"""
author: S.M. Sabbir Amin
date: 18 Jul 2020
email: sabbiramin.cse11ruet@gmail.com

"""
import codecs
import datetime
import json
from textwrap import dedent

from jinja2 import Template

temp_method = '''
@app.route({{ url }}, method=[{{ methods }}])
def {{ api_name }}():
    if request.method in [{{ methods }}]:
        response = {{response_body}}
        return jsonify(response), {{ status_code }}

'''


class Doc:
    def __init__(self, name):
        self.name = name
        self.base_url = 'http://127.0.0.1:1034'
        self.today = datetime.datetime.now().strftime('%Y %d %b, %I:%M %p')
        self.output_md_file_name = 'document.md'

        self.apis = list()

    def add_api(self, api):
        return self.apis.append(api)

    def build(self):
        components = list()

        components.append('# {}'.format(self.name))
        components.append('`Base URL` - {}\n'.format(self.base_url))

        components.append('`Last Edited` - {}'.format(self.today))

        for indx, api in enumerate(self.apis):
            components.append('## {}. {}'.format(indx + 1, api.name))
            components.append('- {}'.format(api.details))
            components.append('### API Path \n{}{}'.format(self.base_url, api.url))

            components.append('## Request')
            components.append('---------------')

            if len(api.request.method):
                components.append('### Methods')
                components.append('- {}'.format(', '.join([meth.upper() for meth in api.request.method])))

            if api.request.header:
                components.append('### Header')

                Header_val = '```json\n' \
                             '{}\n' \
                             '```'.format(json.dumps(api.request.header, indent=2, ensure_ascii=False))
                components.append(Header_val)
            if api.request.body:
                components.append('### Body')

                Header_val = '```json\n' \
                             '{}\n' \
                             '```'.format(json.dumps(api.request.body, indent=2, ensure_ascii=False))
                components.append(Header_val)

            if api.request.params:
                components.append('### Parameters')
                Param_vals = '```json\n' \
                             '{}\n' \
                             '```'.format(json.dumps(api.request.params, indent=2, ensure_ascii=False))
                components.append(Param_vals)

            components.append('## Response')
            components.append('---------------')

            components.append('`HTTP Status Code` - {}'.format(api.response.status_code))
            if api.response.header:
                components.append('### Header')

                Header_val = '```json\n' \
                             '{}\n' \
                             '```'.format(json.dumps(api.response.header, indent=2, ensure_ascii=False))
                components.append(Header_val)
            if api.response.body:
                components.append('### Body')

                Header_val = '```json\n' \
                             '{}\n' \
                             '```'.format(json.dumps(api.response.body, indent=2, ensure_ascii=False))
                components.append(Header_val)

        complete = '\n'.join(components)
        with codecs.open(self.output_md_file_name, 'w', 'utf-8') as ff:
            ff.write(complete)

        return complete

    def build_server(self):
        header = ''' 
        # -*- coding: utf-8 -*-

        # This Server Code is Automatically Generated By 
        # DocAPI Python Utility.
        # Date: {}
        # Github: https://github.com/sabbiramin113008/docapi


        from flask import Flask, jsonify, request

        app = Flask(__name__)
        app.secret_key = 'SomeSecretKey'

        '''.format(self.today)
        footer = '''
        if __name__=='__main__':
            app.run(
                host='localhost',
                port=1034,
                debug=True
            )
        '''
        body = ''

        for api in self.apis:
            url = '\'{}\''.format(api.url)
            api_name = str(api.name).strip().lower().replace(' ', '_')
            methods = ','.join(['\'{}\''.format(meth) for meth in api.request.method])
            response_body = api.response.body if api.response.body else {}
            status_code = api.response.status_code

            template = Template(temp_method)
            rendered = template.render(url=url,
                                       api_name=api_name,
                                       methods=methods,
                                       response_body=response_body,
                                       status_code=status_code
                                       )
            body += rendered
        server_code = dedent(header) + body + dedent(footer)
        try:
            with codecs.open('server.py', 'w', 'utf-8') as ff:
                ff.write(server_code)
        except Exception as e:
            raise Exception(e)


class Request:
    def __init__(self, ):
        self.header = {}
        self.params = None
        self.body = None
        self.method = list()


class Response:
    def __init__(self):
        self.header = dict()
        self.body = None
        self.status_code = 200


class API:
    def __init__(self):
        self.url = ''
        self.name = ''
        self.details = ''
        self.request = Request()
        self.response = Response()

    def __repr__(self):
        return 'URL:{}\nName:{}\n,Details:{}\n'.format(self.url, self.name, self.details)
